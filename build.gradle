
//TEST FRAMEWORKS DEPENDENCIES
ext.JUNIT= "junit:junit:${TEST_JUNIT}"
ext.LOGGING = "ch.qos.logback:logback-classic:$LOG_LOGBACK"
ext.tests_frameworks = [
JUNIT,
"org.mockito:mockito-core:${TEST_MOCKITO}",
"cglib:cglib-nodep:${TEST_CGLIB}",
"org.hamcrest:hamcrest-core:${TEST_HAMCREST}",
"org.objenesis:objenesis:${TEST_OBJENESIS}"
]

logger.info "\n\n\nFramework Version $version\n"

apply plugin: "java"
apply plugin: "maven"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "project-report"

/** REPOSITORIES */
repositories {

	mavenLocal()
	mavenCentral()
	jcenter()

}

sourceSets {
    test {
        resources {
            srcDir 'src/test/resources'
            exclude '**/java_input/**'
            exclude '**/java_output/**'
       }
   }
}

/** JAVA COMPILATION */
compileJava {
	//enable compilation in a separate daemon process
	options.fork = true
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	//enable incremental compilation
	options.incremental = true
}


jar { manifest.attributes provider: 'Echoes-Labs' }

/** CONFIGURATIONS */
configurations { provided }

sourceSets {
	main {
		compileClasspath += configurations.provided
		runtimeClasspath += configurations.provided
	}

	test {
		compileClasspath += configurations.provided
		runtimeClasspath += configurations.provided
	}

}
eclipse.classpath.plusConfigurations += configurations.provided


/** DEPENDENCIES */
dependencies {

	compile "org.slf4j:slf4j-api:$LOG_SLF4J"
	runtime "org.slf4j:jcl-over-slf4j:$LOG_SLF4J"
	runtime "org.slf4j:log4j-over-slf4j:$LOG_SLF4J"

	compile "org.apache.commons:commons-lang3:$APACHE_COMMONLANG3"
	compile "commons-io:commons-io:$APACHE_COMMONIO"

	compile "com.google.guava:guava:$GUAVA"

	testCompile LOGGING
	testCompile tests_frameworks // TEST FRAMEWORKS

	testRuntime "org.apache.logging.log4j:log4j-core:${LOG4J}"

	// http://mvnrepository.com/artifact/org.eclipse.jdt/org.eclipse.jdt.core
	compile group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.core', version: '3.10.0'
}

task unitTest(type : Test) { exclude "**/**IT" }


/**
 TESTS
 */

test {

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "512m"

	// set JVM arguments for the test JVM(s)
	jvmArgs '-XX:MaxPermSize=256m'


	tasks.withType(Test) {
		//ignore test failures if commandline has -PignoreTestFailures
		ignoreFailures=project.hasProperty("ignoreTestFailures")

		//always ignore test failures
		//ignoreFailures = true
	}
}


tasks.withType(JavaCompile) { options.incremental = true }

